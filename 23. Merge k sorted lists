class Solution {
public:
    struct Compare {
        bool operator()(ListNode* a, ListNode* b) {
            return a->val > b->val; // Min-heap based on the node values
        }
    };

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty()) return NULL;
        priority_queue<ListNode*, vector<ListNode*>, Compare> pq;

        for (auto list : lists) {
            if (list) pq.push(list);
        }

        ListNode* head = NULL; 
        ListNode* tail = NULL; 

        while (!pq.empty()) {
           
            ListNode* node = pq.top();
            pq.pop();

            if (!head) {
            
                head = tail = node;
            } else {
                
                tail->next = node;
                tail = tail->next;
            }
            if (node->next) {
                pq.push(node->next);
            }
        }

        return head;
    }
};
